# you can read more about security in the related section of the documentation
# http://symfony.com/doc/current/book/security.html
security:
    # http://symfony.com/doc/current/book/security.html#encoding-the-user-s-password
    encoders:
        #Symfony\Component\Security\Core\User\User: plaintext
        FOS\UserBundle\Model\UserInterface: sha512
        
#    acl:
#        connection: default    

    # http://symfony.com/doc/current/book/security.html#hierarchical-roles
#    role_hierarchy:
#        ROLE_ADMIN:       ROLE_USER
#        ROLE_SUPER_ADMIN: [ROLE_USER, ROLE_ADMIN, ROLE_ALLOWED_TO_SWITCH]

#    role_hierarchy:
#        ROLE_ADMIN:       [ROLE_USER, ROLE_SONATA_ADMIN]
#        ROLE_SUPER_ADMIN: [ROLE_ADMIN, ROLE_ALLOWED_TO_SWITCH] 
    role_hierarchy:
        # for convenience, I decided to gather Sonata roles here
        ROLE_SONATA_READER:
            #CATEGORY
            - ROLE_SONATA_ADMIN_CATEGORY_LIST
            - ROLE_SONATA_ADMIN_CATEGORY_VIEW
            #PLACE
            - ROLE_SONATA_ADMIN_PLACE_LIST
            - ROLE_SONATA_ADMIN_PLACE_VIEW
        ROLE_SONATA_EDITOR:
            #CATEGORY
            - ROLE_SONATA_ADMIN_CATEGORY_CREATE
            - ROLE_SONATA_ADMIN_CATEGORY_EDIT
            #PLACE
            - ROLE_SONATA_ADMIN_PLACE_CREATE
            - ROLE_SONATA_ADMIN_PLACE_EDIT
        ROLE_SONATA_ADMIN:
            - ROLE_SONATA_ADMIN_DEMO_FOO_DELETE
            - ROLE_SONATA_ADMIN_DEMO_FOO_EXPORT
        # those are the roles I will use (less verbose)
        ROLE_USER_VERIFIED:     [ROLE_USER]
        ROLE_MODERATOR:         [ROLE_USER_VERIFIED, ROLE_SONATA_READER, ROLE_SONATA_EDITOR]
        ROLE_ADMIN:             [ROLE_MODERATOR, ROLE_SONATA_EDITOR, ROLE_SONATA_ADMIN]
        ROLE_SUPER_ADMIN:       [ROLE_ADMIN, ROLE_ALLOWED_TO_SWITCH]
    
    access_decision_manager:
        strategy: unanimous
#        SONATA:
#            - ROLE_SONATA_PAGE_ADMIN_PAGE_EDIT  # if you are using acl then this line must be commented

    # http://symfony.com/doc/current/book/security.html#where-do-users-come-from-user-providers
    providers:
        in_memory:
            memory:
                users:
                    user:  { password: userpass, roles: [ 'ROLE_USER' ] }
                    admin: { password: adminpass, roles: [ 'ROLE_ADMIN' ] }
        fos_userbundle:
            id: fos_user.user_provider.username            

    # the main part of the security, where you can set up firewalls
    # for specific sections of your app
    firewalls:
#        main:
#            pattern: ^/
#            form_login:
#                provider: fos_userbundle
#                csrf_provider: form.csrf_provider
#            logout:       true
#            anonymous:    true
        main:
            pattern:             .*
            context:             user
            form_login:
                provider:       fos_userbundle
                login_path:     /login
                use_forward:    false
                check_path:     /login_check
                failure_path:   null
            logout:             true
            anonymous:          true
            oauth:
                resource_owners:
                    vk:           "/login/check-vk"
                login_path:        /login
                failure_path:      /login
                oauth_user_provider:
                        service: my_user_provider    
            
        admin:
            pattern:            /admin(.*)
            context:            user
            form_login:
                provider:       fos_userbundle
                login_path:     /admin/login
                use_forward:    false
                check_path:     /admin/login_check
                failure_path:   null
            logout:
                path:           /admin/logout
            anonymous:          true    
        # disables authentication for assets and the profiler, adapt it according to your needs
        dev:
            pattern:  ^/(_(profiler|wdt)|css|images|js)/
            security: false
        # the login page has to be accessible for everybody
        demo_login:
            pattern:  ^/demo/secured/login$
            security: false

        # secures part of the application
        demo_secured_area:
            pattern:    ^/demo/secured/
            # it's important to notice that in this case _demo_security_check and _demo_login
            # are route names and that they are specified in the AcmeDemoBundle
            form_login:
                check_path: _demo_security_check
                login_path: _demo_login
            logout:
                path:   _demo_logout
                target: _demo
            #anonymous: ~
            #http_basic:
            #    realm: "Secured Demo Area"

    # with these settings you can restrict or allow access for different parts
    # of your application based on roles, ip, host or methods
    # http://symfony.com/doc/current/cookbook/security/access_control.html
    access_control:
        - { path: ^/login$, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/register, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/resetting, role: IS_AUTHENTICATED_ANONYMOUSLY }
        #CHANGE AFTER TEST#
        - { path: ^/admin/, role: ROLE_USER } 
        #- { path: ^/admin/, role: ROLE_MODERATOR }
        #- { path: ^/login, roles: IS_AUTHENTICATED_ANONYMOUSLY, requires_channel: https }